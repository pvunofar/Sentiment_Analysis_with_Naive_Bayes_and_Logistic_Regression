import streamlit as st
import joblib
import nltk
import re
import numpy as np
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

# ------------------ Preprocess ------------------
def preprocess_text(text):
    text = str(text).lower()
    tokens = re.findall(r'\b\w+\b', text)  # t√°ch t·ª´ b·∫±ng regex
    stop_words = set(stopwords.words('english'))
    tokens = [t for t in tokens if t not in stop_words]
    stemmer = PorterStemmer()
    tokens = [stemmer.stem(t) for t in tokens]
    return " ".join(tokens)

# ------------------ Giao di·ªán ch√≠nh ------------------
st.set_page_config(page_title="Sentiment Analysis", page_icon="üìä", layout="wide")

st.title("üìä Ph√¢n lo·∫°i c·∫£m x√∫c b√¨nh lu·∫≠n")
st.write("·ª®ng d·ª•ng demo s·ª≠ d·ª•ng **NLP + Machine Learning** ƒë·ªÉ ph√¢n lo·∫°i review t√≠ch c·ª±c / ti√™u c·ª±c.")

# Sidebar cho c√°c l·ª±a ch·ªçn
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh")
method = st.sidebar.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p:", ["Bag of Words (BoW)", "TF-IDF"])
model = st.sidebar.selectbox("Ch·ªçn m√¥ h√¨nh:", ["Naive Bayes", "Logistic Regression"])
show_preprocess = st.sidebar.checkbox("Hi·ªÉn th·ªã vƒÉn b·∫£n sau khi x·ª≠ l√Ω")

user_input = st.text_area("‚úçÔ∏è Nh·∫≠p review:", "", height=150)

models = {
    "NaiveBayes": {
        "BoW": "naive_bayes_bow.pkl",
        "TF-IDF": "naive_bayes_tfidf.pkl"
    },
    "LogisticRegression": {
        "BoW": "logistic_regression_bow.pkl",
        "TF-IDF": "logistic_regression_tfidf.pkl"
    }
}
vectorizers = {
    "BoWVectorizer": "bow_vectorizer.pkl",
    "TF-IDFVectorizer": "tfidf_vectorizer.pkl"
}

if st.button("D·ª± ƒëo√°n"):
    if user_input.strip() == "":
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p review tr∆∞·ªõc khi d·ª± ƒëo√°n!")
    else:
        with st.spinner("üîé ƒêang ph√¢n t√≠ch..."):
            clean_text = preprocess_text(user_input)

            if model == "Naive Bayes":
                if method == "Bag of Words (BoW)":
                    vectorizer = joblib.load(vectorizers["BoWVectorizer"])
                    model = joblib.load(models["NaiveBayes"]["BoW"])
                    vectorized_text = vectorizer.transform([clean_text])
                else:  # TF-IDF
                    vectorizer = joblib.load(vectorizers["TF-IDFVectorizer"])
                    model = joblib.load(models["NaiveBayes"]["TF-IDF"])
                    vectorized_text = vectorizer.transform([clean_text])
                prediction = model.predict(vectorized_text)[0]
            else:  # Logistic Regression
                if method == "Bag of Words (BoW)":
                    vectorizer = joblib.load(vectorizers["BoWVectorizer"])
                    model = joblib.load(models["LogisticRegression"]["BoW"])
                    vectorized_text = vectorizer.transform([clean_text])
                else:  # TF-IDF
                    vectorizer = joblib.load(vectorizers["TF-IDFVectorizer"])
                    model = joblib.load(models["LogisticRegression"]["TF-IDF"])
                    vectorized_text = vectorizer.transform([clean_text])
                prediction = model.predict(vectorized_text)[0]

        col1, col2 = st.columns(2)
        with col1:
            if prediction == 1:
                st.error("üò° Review **ti√™u c∆∞Ã£c!**")
            else:
                st.success("üòä Review **tiÃÅch c∆∞Ã£c!**")
        with col2:
            st.metric("ƒê·ªô d√†i review (sau x·ª≠ l√Ω)", f"{len(clean_text.split())} t·ª´")

        if show_preprocess:
            st.info(f"üîß VƒÉn b·∫£n sau khi x·ª≠ l√Ω: \n\n`{clean_text}`")
